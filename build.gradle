buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/'}
        maven { url 'http://dl.bintray.com/content/aalmiray/kordamp' }
    }

    dependencies {
        classpath 'gradle.plugin.com.github.jk1:gradle-license-report:1.2',
                  'org.kordamp:markdown-gradle-plugin:1.1.0',
                  'gradle.plugin.org.gradle.crypto:checksum:1.1.0'
    }
}

apply plugin: 'java'
apply plugin: 'com.github.jk1.dependency-license-report'
apply plugin: 'org.kordamp.markdown.convert'
apply plugin: 'org.gradle.crypto.checksum'
import org.gradle.crypto.checksum.Checksum

defaultTasks 'clean', 'build'

ext.rundeckPluginVersion='1.2'
ext.rundeckPluginArchive='true'
//Set this to a comma-separated list of full classnames of your implemented Rundeck plugins.
ext.rundeckPluginClassnames='com.github.theque5t.DIYWebhookNotificationPlugin.DIYWebhookNotificationPlugin'
ext.rundeckPluginAuthor='Trevor Highfill'
ext.rundeckPluginURL='https://github.com/theque5t/rundeck-diy-webhook-notification'
ext.rundeckPluginDate=new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
ext.rundeckPluginFileVersion = hasProperty('projectVersion') && projectVersion != "" ? projectVersion.replaceAll(/v(\d+\.\d+\.\d+)/,'$1') : 'SNAPSHOT-'+new Date().format("yyyyMMddHHmmss")
project.version=ext.rundeckPluginFileVersion

configurations{
    //declare custom pluginLibs configuration to include only libs for this plugin
    pluginLibs

    //declare compile to extend from pluginLibs so it inherits the dependencies
    compile{
        extendsFrom pluginLibs
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.rundeck', name: 'rundeck-core', version: '2.6.9'
    compile group: 'org.bouncycastle', name: 'bcprov-jdk15to18', version: '1.65'

    pluginLibs(
	 'nl.big-o:liqp:0.7.5'
	)
}

task copyIndexHtml(type: Copy){
    into "$buildDir/output/dependency-license"
    from "$buildDir/reports/dependency-license/index.html"
}

htmlToMarkdown {
    sourceDir = file("$buildDir/output/dependency-license")
    outputDir = file("$buildDir/output/dependency-license")
}

task copyToOutput(type: Copy) {
    into "$buildDir/output"
    from("$buildDir/reports"){
        include "dependency-license/**"
    }
    from "LICENSE"
}

task deleteIndexHtml(type: Delete){
    delete "$buildDir/output/dependency-license/index.html"
    delete "$buildDir/reports/dependency-license/index.html"
}

task copyIndexMarkdown(type: Copy){
    into "$buildDir/reports/dependency-license"
    from "$buildDir/output/dependency-license/index.md"
}

// task to copy plugin libs to output/lib dir
task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.pluginLibs
}

jar {
    //include contents of output dir
    from "$buildDir/output"
    manifest {
        def libList = configurations.pluginLibs.collect{'lib/'+it.name}.join(' ')
        attributes 'Rundeck-Plugin-Version': rundeckPluginVersion
        attributes 'Rundeck-Plugin-Archive': rundeckPluginArchive
        attributes 'Rundeck-Plugin-Classnames': rundeckPluginClassnames
        attributes 'Rundeck-Plugin-Libs': "${libList}"
        attributes 'Rundeck-Plugin-Author': rundeckPluginAuthor
        attributes 'Rundeck-Plugin-URL': rundeckPluginURL
        attributes 'Rundeck-Plugin-Date': rundeckPluginDate
        attributes 'Rundeck-Plugin-File-Version': rundeckPluginFileVersion
    }
}

task createChecksum(type: Checksum) {
  files = jar.outputs.files
  outputDir = new File("${project.buildDir}/libs")
  algorithm = Checksum.Algorithm.SHA256
}

//set task dependencies
copyIndexHtml.dependsOn(generateLicenseReport)
htmlToMarkdown.dependsOn(copyIndexHtml)
copyToOutput.dependsOn(htmlToMarkdown)
deleteIndexHtml.dependsOn(copyToOutput)
copyIndexMarkdown.dependsOn(deleteIndexHtml)
copyToLib.dependsOn(copyIndexMarkdown)
jar.dependsOn(copyToLib)
createChecksum.dependsOn(jar)
build.dependsOn(createChecksum)
